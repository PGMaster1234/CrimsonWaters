CLOUD CHUNKING SYSTEM OVERVIEW
What about using smaller chunks to roughly approximate the circular shape of the vision? Build a dictionary during generation that maps each chunk to neighboring chunks, marking the edges as ones that need to be searched. This way the central chunks don't need to be looped over. The transparency can be more abrupt to where tiles in "central chunks" are just always fully transparent and tiles in the outer ring of chunks have their opacity set by a distance calculation for some opacity smoothing. You can use quite a small chunk size and store multiple set "radii" so everything is precomputed. When the cloud cover function is called the distance just gets rounded up to the nearest stored radius. This way all references are precomputed and the only calculation required is a distance calculation for edge chunks.
To clarify, the dictionary stores a mapping of each pair (chunk, radii) to a list of two lists. The first list contains the indexes of "internal chunks", ones who are close enough to the current chunk that all tiles in them are fully opaque. The second list contains all edge chunks that are close to the radius band, meaning their tiles need to be explicitly distance checked for opacity calculations. The dictionary only stores the indexes of the chunks, not the entire list of tiles.
Dictionary lookups are constant time so using extremely small chunks (maybe only around 10 per chunk) is beneficial even if it means more pre-computation. This minimizes the number of tiles in the "edge chunks" band meaning less distance calculations each frame.
Use a euclidean distance check using the chunk indexes. For example, (0, 0) is 2 chunks away from (2, 0).
One speed up you can do for the pre-computation is in the order you search chunks. Start with the largest radii you are going to search (use this list to begin with (50, 100, 150, 200)) and search for the indexes of nearby chunks for each chunk. In the next loop (now using 150 as the radius) you only need to loop through the chunks already stored in the (currentChunk, radius=200) key since everything else is known to be farther away.
Also, for every chunk after this you can just shift the indexes and remove indices that are outside the maximum dimensions of the chunk grid since the "pattern" nearby chunks will always be in is perfectly consistent.

CLOUD CHUNKING SYSTEM RUNTIME OPTIMIZATION
