CLOUD CHUNKING SYSTEM OVERVIEW
What about using smaller chunks to roughly approximate the circular shape of the vision? Build a dictionary during generation that maps each chunk to neighboring chunks, marking the edges as ones that need to be searched. This way the central chunks don't need to be looped over. The transparency can be more abrupt to where tiles in "central chunks" are just always fully transparent and tiles in the outer ring of chunks have their opacity set by a distance calculation for some opacity smoothing. You can use quite a small chunk size and store multiple set "radii" so everything is precomputed. When the cloud cover function is called the distance just gets rounded up to the nearest stored radius. This way all references are precomputed and the only calculation required is a distance calculation for edge chunks.
To clarify, the dictionary stores a mapping of each pair (chunk, radii) to a list of two lists. The first list contains the indexes of "internal chunks", ones who are close enough to the current chunk that all tiles in them are fully opaque. The second list contains all edge chunks that are close to the radius band, meaning their tiles need to be explicitly distance checked for opacity calculations. The dictionary only stores the indexes of the chunks, not the entire list of tiles.
Dictionary lookups are constant time so using extremely small chunks (maybe only around 10 per chunk) is beneficial even if it means more pre-computation. This minimizes the number of tiles in the "edge chunks" band meaning less distance calculations each frame.
Use a euclidean distance check using the chunk indexes. For example, (0, 0) is 2 chunks away from (2, 0).
One speed up you can do for the pre-computation is in the order you search chunks. Start with the largest radii you are going to search (use this list to begin with (50, 100, 150, 200)) and search for the indexes of nearby chunks for each chunk. In the next loop (now using 150 as the radius) you only need to loop through the chunks already stored in the (currentChunk, radius=200) key since everything else is known to be farther away.
Also, for every chunk after this you can just shift the indexes and remove indices that are outside the maximum dimensions of the chunk grid since the "pattern" nearby chunks will always be in is perfectly consistent.

CLOUD CHUNKING SYSTEM RUNTIME OPTIMIZATION
Ok, so there are many places to speed this process up.
1) Every tile being reset every frame. This is unnecessary. Most tiles on the screen are either already opaque and staying fully opaque this new frame or already transparent and staying fully transparent. Add a boolean within each tile for whether or not its transparency is changing, and only draw the polygon if it's transparency has changed.
2) You shouldn't be looping through every tile in the first place. Tile opacities should never get "reset". Only tiles within the given radius (so being set to fully transparent or partially transparent) should be getting accessed at all, since other tiles are by default not changing. Only internal and edge chunks should ever be accessed in each frame.
3) Don't reset the cloudSurf every frame. Redrawn tiles don't "stack" or "add", so they will properly cover up the previous tile and its transparency with the new correct color.
4) Ensure that the cloudSurf begins (in the draw2internal screen) as a fully drawn surface where every cloud is fully shown (all starting fully opaque).
5) Clouds don't need fancy opacity storage and other checks. Simply find the new calculated opacity and set the tile's opacity to that value without any smoothing. Remove all extraneous smoothing variables that are no longer needed.
Provide the entire updated code file with these changes implemented. Do not add excessive line by line comments. Do not use inline statements or semi-colons. Do not add excessive try-catches or checks for whether functions, libraries, and surfs exist.

LOADING SCREEN MISSING TASKS (NO PROGRESS BAR)
During the generation process while the user is on the loading screen, there is a period of a few seconds where the screen shows
"initializing worker" and "worker initialization done". This is before the screen that shows "finalizing generation" and
"retrieving map data". During that second screen where the main process is receiving the child process tile handler data,
the screen temporarily freezes. This is expected. Before this, however, during the first screen the program appears to
be computing something since nothing changes. The "worker initialization: done"  progress bar has completed but nothing
on the screen changes (other than the loading animation, meaning it's not frozen). This means another task is being computed
even though it isn't shown on the screen with a progress bar. Find this task, store its timer with the other tasks,
and ensure it's displayed on the loading screen. Provide entire updated code files, not segments. Do NOT use inline statements.
Do NOT add excessive comments. NEVER use semicolons.

I provided the times below (these are stored in the execution_times.csv file) for reference.
... <pasted timers> ...